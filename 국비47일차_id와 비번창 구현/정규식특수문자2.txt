+ 정규식 특수문자 - 2

 - * {0,}
	0회 이상 연속으로 반복되는 문자에 매칭

	ex) /gr*/ - g문자와 r문자의 조합, r은 없어도되고 여러 개여도 매칭

	"grrrr" -매칭됨
	"grow" - gr에 매칭
	"get" - g에 매칭
	"program" -gr에 매칭


- + {1,0}
	1회 이상 연속으로 반복되는 문자에 매칭
	
	ex) /co+/
		
		"count" -"co"에 매칭
		"cnt" - 매칭되지 않음

- ? {0,1} 
	0회 또는 1회로 사용되는 문자에 매칭
	ex) /e?le?/  -> l은 단수문자 반드시 있어야 함
		"ele", "el", "le", "l" 문자에 매칭

	"elephant" -"ele"에 매칭
	"angel" -"el"에 매칭
	"angle" -"le"에 매칭
	"also" -"l"에 매칭

- . 
	임의의 문자 한개를 표현
	어떤 문자든지 상관없이 한자리를 표현한다.

	ex) /.n/  -> "n"이 뒤에 오는 2글자 문자에 매칭
	
	"an apple"	-"an"에매칭
	"angel"		-"an"에매칭
	"an apple is on tree"	-"an / on"에 두개매칭

- {n}
	n은 정수값
	n번 사용된 경우에 매칭된다
	
	ex)/r{3}/ -"rrr"에 매칭된다.
	"grr" - 매칭되지 않음
	"grrr" -"rrr"에 매칭
	"grrrrr" -앞쪽 "rrr"에 매칭된다
	"grrrrrr/g" - "rrr", "rrr"에 매칭된다



-{n, m}
	n,m은 정수값(n<=m)
	최소 n번, 최대 m번 사용될 경우 매칭된다

	m을 생략하면 무한으로 반복되는 경우 매칭된다

	ex) /a{1,3}/  -> "a", "aa", "aaa"에 매칭
	"band" - "a"에 매칭
	"baaaam" -"aaa", "a" 에 매칭
	"bond" - 매칭되지 않음

	ex) /a{1,}/ -"a"가 한번 이상 나올때 매칭

	"band" -"a"에 매칭
	"baaaam" -"aaaa"에 매칭
	


** {0,} 으로 * 특수기호 표현가능
	ex) /gr*/ -> /gr{0,}/
	

** {1,} 으로 + 특수기호 표현가능
	ex) /co+/ -> /co{1,}/


** {0,1} 으로 ? 특수기호 표현가능
	/e?le? -> /e{0,1}le{0,1}/

- (x)
	x에 들어간 패턴을 하나의 그룹으로 매칭한다
	ex) /poo{1,2}/ - "poo", "pooo"에 매칭
	
	"pooh, winnie the pooh" - "poo", "poo" 매칭
	"poopoopoo" -"poo","poo","poo" 매칭
	"pooopoopoo" - "pooo", "poo", "poo" 매칭

 	ex) /(poo}{1,2}/ - "poo", "poopoo"에 매칭
	
	"pooh, winnie the pooh" - "poo", "poo" 매칭
	"poopoopoo" -"poopoo","poo" 매칭
	"pooopoopoo" - "poo", "poopoo" 매칭

- x|y
	x패턴 또는 y패턴에 매칭된다

	ex) /apple|banana/ - "apple" 또는 "banana"에 매칭된다
	
	"5 apples" - "apple" 에 매칭
	"apple and banana" - "apple","banana" 에 매칭
	"red apple" - "apple" 에 매칭


- [xyz]
	대괄호 내부에 있는 문자들 각각에 매칭된다

	ex) /[abcde]/ == /a|b|c|d|e/ 와 같다.
	"apple" - "a", "e" 에 매칭
	"banana" - "b", "a","a","a"에 매칭
	
** 패턴에 "-" 기호를 이용하여 연속된문자를 표현한다

	ex)/[a-e]/ ==/[abcde]/

	**/[a-z]/ -소문자
	**/[A-Z]/ -대문자

	**/[0-9]/ -숫자
	**/[a-zA-Z0-9]/ -영어 대소문자, 숫자

	**/[ㄱ-ㅎ]/ - 자음
	**/[ㅏ-ㅣ]/ - 모음
	**/[가-힣]/ - 완성형 문자 전체

	**/[ㄱ-ㅎ ㅏ-ㅣ 가-힣]/ -한글 모든 문자 조합

- [^xyz]
	제외시킬 문자지합을 표현한다
	[]대괄호 안에서 ^을 사용하면 시작패턴의 의미가 아님
	
	ex) /[^abcde]/ -[abcde]/ 패턴을 제외하고 매칭
	"apple" - "p", "p","l"에 매칭
	"banana" -"n","n"에 매칭	

** ? 의 특수기능
 	정규식 특수문자패턴 중에서 횟수를 표현하는 문자들을 
	최대한 많은 데이터를 묶어서 매칭한다

	횟수 표현문자 뒤에?를 사용하면 최대한 짧게 매칭시킨다
	
	ex) /[a-z]/
	"all test" - 소문자들을 각각 7개로 매칭

	ex)/[a-z]+/
	"all test" - "all", "test"에 매칭
	

	ex)/[a-z]?/
	"all test" - 소문자들을 각각 7개 매칭
	

	ex /[a-z]{2,3}/
	"all test"  -"all", "tes" 에 매칭

	ex /[a-z]{2,3}?/
	"all test" -"al", "te", "st"에 매칭


	-> 정규식의 기본 동작은 한번에 최대한 많은 문자를 매칭하려고한다 (한 그룹에 많은 문자)

	-> ?를 이용한 제한 규칙은 최대한 많은 그룹을 매칭하력 한다
(적은 문자로 많은 그룹)


- 축약형 특수문자
	\d	-> digit, 숫자, [0-9]
	\D 	-> 숫자가 아닌 문자, [^0-9]
	
	\w	-> word, 단어 문자, 밑줄 문자, 영숫자 문자,[A-Za-z0-9]
	\W	-> word가 아닌 문자[^A-Za-z0-9]
	
	\s	-> space, 공백문자, [\r\n\b\t\v\f]
	\S	-> 공백문자가 아닌 문자 [\r\n\b\t\v\f]
		([]대괄호 안에서 \를 사용하면 제어문자로 인식)

	\t	-> tab, 수평 탭, [\t]

	\n	-> new line, 개행문자, [\n]

	\b	-> boundary, 경계선 문자, 단어가 끝나는 곳에 매칭
	\B	-> 경계선이 아닌 문자

	**[\b] - 백스페이스 문자
	** \b 와 [\b]는 의미가 다르다

	ex) /a\b/	-"a"의 뒤가 경계선인 문자(단어의 끝)
	"apple banana" - "banana"의 마지막"a에 매칭

	/\ba/	-"a"의 앞이 경계선인 문자 (단어의 시작)
	"apple banana"	-"apple의 첫 "a"에 매칭










	