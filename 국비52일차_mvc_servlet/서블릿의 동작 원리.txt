+ 서블릿의 동작 원리
	
	클라이언트 HTTP 요청 -> Apache Tomcat서버(WEB서버 + WAS서버)
 -> 서블릿 컨테이너 -> (URL매핑을 참고함) -> 서블릿 객체
  
 -> 서블릿객체의 service() 메소드 호출됨 (요청 method확인)
 
 -> 요청메소드에 따라 doGet() 또느 doPost 메소드 호출
 
 -> 서블릿 컨테이너
 
 -> Apache Tomcat 서버 -> 클라이언트 HTTP 응답

-----------------------------------------------------------------	

+ 서블릿 컨테이너, Servlet Container
 - 서블릿이 동작되는 환경을 구축하는 역할을 담당한다

 - 서블릿 객체를 생성하고 실행시켜주는 역할을 수행한다

 - WAS 서버와 서블릿 객체를 연결하는 중간다리 역할을 수행한다

 - 요청 URL -Pattern 과 서블릿 객체를 1:1로 매핑해놓고 클라이언트의 요청에 따라 서블릿 객체를 실행시킨다

 - 매핑 테이블은 web.xml(배포관리자)를 참고해서 생성한다

 - HTTP 요청정보를 HttpServletRequest 객체를 생성하고,
 HTTP 응답정보를 HttpServletResponse 객체로 생성한다

 - HttpServletRequest(Http요청객체). HttpServletResponse(Http응답객체)를 서블릿 객체에 전달한다

-----------------------------------------------------------------

+ 서블릿객체의 라이프 사이클(생명 주기)
	1. 객체 생성(생성자 호출)
	2. init() 실행(서블릿 초기화)
	3. service()실행(doGet(), doPost() 반복적으로 실행)
	4. detory() 실행 (서블릿 정리) (서버 종료)


 - 객체 생성
	URL 요청에 따른 서블릿 객체가 처음으로 사용될 때 수행한다

 - init()
	객체 생성이후 곧바로 호출된다

 - service()
	URL 요청이 있을 때마다 반복적으로 호출된다
	-> Request Method에 따라 doGet() 또는 doPost()를 호출해준다

 - detroy()
	서버가 종료되는 시점에 호출된단
		
 ** 서버가 켜질 때 서블릿 객체가 같이 생성되지 않는다

 ** 서버가 켜진 이후 처음으로 서블릿이 사용될 때( 첫번째 요청에 반응할 때)
	객체 생성 - init() - service() - 응답 순으로 진행된다
 ** 객체가 생성된 이후 서블릿이 사용될 때( 첫번째 요청이 아닐 때)
	service()- 응답 순으로 진행된다


