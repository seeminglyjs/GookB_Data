+ 컨트롤러 메소드에서 사용하는 리턴타입 3가지

 - void

 - String

 - MdoelAndView


 1. void 타입
 - @RequestMapping의 value로 설정한 url-pattern을 판단하여 viewName으로 사용

 - 처음으로 오는 '/'를 제거한다
 - 폴더구조를 유지한다
 - url에 확장자를 가지면 확장자를 제거한다


	ex)	@RequestMapping(value="/member/login.do")
		public void login() {}
		
		viewName: member/login
		view path: /WEB-INF/views/member/login.jsp 


 2. String 타입

 - return 코드에서 반환한 문자열을 viewNAme으로 지정한다
 - return null; 일 경우에는 void 리턴타입과 동일하게 동작한다

	ex)	@RequestMapping(value="/member/login.do")
		public String login(){
		return "strMember/strLogin";
		}
			
		viewName: strMember/strLogin
		view path: /WEB-INF/views/strMember/strLogin.jsp
		


 3. ModelAndView 타입

 - MODEL 값 지정과 viewName 설정을 하나의 객체로 처리한다

 - 컨트롤러 메소드의 매개변수로 선언하여 사용할 수 있다
 - 메소드 내에서 new ModelAndView()로 생성하여 사용할 수 있다
 ( 두 방식의 차이점은 없으며 마음에 드는 방식으로 개발하면 된다)

 - return 값으로 선언된 변수를 반환한다

	ex)	@RequestMapping(value="/member/login.do")
		public ModelAndView login(ModelAndView mav){
		
		mav.addObject("key", value); //모델값 지정
		mav.setViewName("viewName); // 뷰네임 지정

		return mav;
		}

	
	ex)	@RequestMapping(value="/member/login.do")
		public ModelAndView login(){
		
		ModelAndView mav = new ModelAndView();

		mav.addObject("key", value); //모델값 지정
		mav.setViewName("viewName); // 뷰네임 지정

		return mav;
		}



