+ WHERE 절
	조건절
	
	조건을 만족하는 데이터만 조회하도록 설정하는 구문
	
	SELECT, UPDATE, DELETE 구문에서 전부 사용된다.

+ WHERE 절의 구문 형식

	WHERE [ 조건절 ]

	**조건절 형식
		컬럼명 연산자 조건값

+ 조건절 연산자
	
	-비교(관계) 연산자
		=	같다.
		!= 	같지 않다 [ <>, ^= ]

		<	작다 
		>	크다

		<=	작거나 같다
		>=	크거나 같다.


	-논리 연산자

		AND	두 조건이 모두 참일 때 전체 참
		OR	두 조건 모두 하나라도 참일 때 참
		NOT	논리 부정

	
	-기타 연산자
	
		BETWEEN 'A' AND 'B'
		A 와 B 사이의 데이터 ( A, B 를 포함)
			EX) DEPTNO BETWEEN 10 AND 30	
		NOT BETWEEN A AND B
			BETWEEN A AND B 연산자를 부정한 것
			EX) DEPTNO NOT BETWEEN 10 AND 30				


		IN( LIST )
			LIST 에 해당 하는 값들 중에서 하나라도 일치하면 TRUE
			LIST , 로 구분된 데이터를 나타낸다.

			EX) DEPTNO IN ( 10, 30 )
			(DEPTNO = 10 OR DEPTNO = 30)
			
			NOT IN ( LIST )
			IN 연산자를 부정한 것
			EX) DEPTNO NOT IN ( 10, 30)
			(DEPTNO <> 10 AND DEPTNO <> 30 )
				
			 
		LIKE
		지정한 형식의 문자열 서식을 적용하여 해당하는 값만 비교한다.
		% : 여러 개의 문자, 또는 문자가 없는 경우 
		_ : 하나의 문자, 반드시 한 글자가 존재하는 경우
	
		EX) ENAME = 'B' -> ENAME이 'B'라는 문자일 경우
		    ENAME LIKE 'B%' -> B로 시작하는 모든 문자
		
		EX) ENAME LIKE '%B%' -> B를 포함하는 모든 문자
		

		EX) ENAME LIKE '_B%' -> 두번째문자가 B인 모든 문자
		EX) ENAME LIKE '%B' -> B로 끝나는문자
		EX) ENAME LIKE '%B%b' -> B를 두개 포함하는 문자
		EX) ENAME LIKE '__B' ->세글자인데 B로 끝나는문자

		** --  절대 쓰면 안되는 LIKE 문
		-- 같은 값인지 비교할 때 LIKE 연산자 사용하지 말것
		SELECT * FROM EMP
		WHERE ENAME LIKE 'SMITH';
		풀스캔을 유발하기 때문에 쓰면 안된다.
		성능저하가 발생한다.


		IS NULL 	
		IS NULL 이 필요한 이유 
		 = 연산자로 NULL을 조회할 수 없다.
		 이는 없는 데이터이기 때문이다. 컬럼의 데이터로 인식이 안됨

		컬럼의 값이 NULL인지 검사하는 연산자
		EX) WHERE MGR IS NULL

		** 테이블의 데이터 중 NULL 값은 데이터가 없음을 나타낸다.
		
		IS NOT NULL
			IS NULL의 부정문





		