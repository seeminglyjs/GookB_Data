1.   int random  =(int) (Math.random() *4); 의 경우 출력되는 예상 값은 0 ~ 3 까지임 때문에 switch의 범위를 초과하는 경우가 생김.



​2.  while이 매개 값이 (false) 이기 때문에 한 번 실행되며, 비겨도 다시 실행 되지 않는다.

1.    int random  =(int) (Math.random() *3); 처럼 4가 아닌 3을 곱해주면 0 ~ 2 범위에 수만 random에 저장되어 case의 범위를 초과하지 않게 됨​




2.   while 문제는  boolean flag; 를 while밖에 하나 선언해주고, 비겼을 경우 flag = true; 변경해 지속적으로 루프를 돌 수 있도록 while(flag)로 바꾸어준다. 여기서 중요한점 은 비긴 다음에 이기거나 졌을때는 while문을 종료해야 하기 때문에 항상 do { flag = false . . . } 와 같이 맨처음에 flag 값을 초기화 시켜줄 수 있도록 해주어야 한다.


주어진 구현클래스는 Circle / RectAngle와 실행클래스 ShapeMaker​로 구성되어 있으며, 각 구현클래스가 실행클래스에 객체로 생성되어 사용된다. 구현 순서는 우선 구현클래스를 먼저 작성하고 이후 실행클래스를 작성하는 방식으로 하겠다. 









--Circle--

구현클래스 Circle은 필드 PI(원주율)과 private radius로 선언되어 있으며, 여기서 PI는 public final로 선언해 주어야한다. 이후 생성자는 defaul와 필드를 매개변수로 받는 생성자 총 두가지가 있는데 마찬가지로 PI는 final이기 때문에 생성자로 받을 필요가 없다. 이후 getter setter를 만들어 각 변수에 접근할 수 있게 하면되며, (PI는 final로 setter 안됨) 마지막으로 draw 메서드를 선언하면된다. draw 메소드 내용으로는"반지름 " + radius + "cm인 원을 그립니다." 을 출력할 수 있도록 System.out.println안에 넣어주면주면 마무리 된다.


--RectAngle-- 

다음 RectAngle이다. 사실 Circle과 클래스를 구현과 크게 다르지 않다. 마찬가지로 필드 width / height 를 private로 선언해준다. 다음은 default 생성자 하나와 필드를 초기화해주는 생성자 하나를 선언해주고 이후 getter setter로 필드에 접근할 수 있도록 선언해주면된다. 마지막으로 draw 메서드 역시 단순 필드값을 받아서 출력하는 메서드이기 때문에 "가로 " + width + "cm 세로 " + height + " cm인 사각형을 그립니다." 를 System.out.println안에 넣어주면 된다.


--ShapeMaker​--

마지막 구현 클래스이다. Circle의 경우 크기 3의 배열을 선언해주고 반복문(for)으로 i 값을 받아 각 객체를 초기화 한후 draw 메서드를 사용해주면 되는데, 매개 값이 20 40 50 이다. 매개값이 등차수열(20 -> 30 순으로 커짐) 일 가능성이 있지만, 반복횟수가 적어 정확히 알 수 없다. 때문에 따로 해당 부분을 구현하지 않고 단순 연산으로 구현하였다.

다음으로 RectAngle 크기 2의 배열을 선언해주고 이후 마찬가지로 반복문을 이용해 생성자로 매개값을 받아 초기화 해준다. 반복횟수가 적어 어떤형식으로 매개변수 값이 커지는지 알수 없어 역시 width += 30 / height += 40 씩커지는 방식으로 구현하였다.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


코드 순서  1. Circle      ​2. RectAngle          3.ShapeMaker

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



package Template.quiz0127;



public class Circle {

	public final double PI = Math.PI;

	private int radius;

	

	public Circle() {

		

	}



	public Circle(int radius) {

		this.radius = radius;

	}



	

	public void draw() {

		System.out.println("반지름 " + radius + "cm인 원을 그립니다.");

	}

	

	

	//// getter / setter

	public int getRadius() {

		return radius;

	}



	public void setRadius(int radius) {

		this.radius = radius;

	}



	public double getPI() {

		return PI;

	}

	

	

}​



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



package Template.quiz0127;



public class RectAngle {

	private int width;

	private int height;



	public RectAngle() {



	}



	public RectAngle(int width, int height) {

		this.width = width;

		this.height = height;

	}



	

	

	public void draw() {

		System.out.println("가로 " + width + "cm 세로 " + height + " cm인 사각형을 그립니다." );

	}

	

	

	//// getter / setter

	public int getWidth() {

		return width;

	}



	public void setWidth(int width) {

		this.width = width;

	}



	public int getHeight() {

		return height;

	}



	public void setHeight(int height) {

		this.height = height;

	}

	

	

}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



package Template.quiz0127;

public class ShapeMaker {

	public static void main(String[] args) {
		
		Circle [] c = new Circle [3];
		
		int radius = 20;
		for(int i = 0; i < c.length; i++) {
			c[i] = new Circle(radius);
			c[i].draw();
			radius += 20;
			if(radius > 40) { radius = 50;}
		}
		
		RectAngle [] r = new RectAngle[2];
		System.out.println();
		int width = 20;
		int height = 20;
		for(int i = 0; i < r.length; i++) {
			r[i] = new RectAngle(width, height);
			r[i].draw();
			width += 30;
			height += 40;
		}
		
		
		
	}

}














package Template;



public class Person {

	private String name;

	private char gender;

	

	public Person() {

	}

	

	

	public Person(String name, char gender) {

		this.name = name;

		this.gender = gender;

	}





	public String getName() {

		return name;

	}





	public void setName(String name) {

		this.name = name;

	}





	public char getGender() {

		return gender;

	}





	public void setGender(char gender) {

		this.gender = gender;

	}

	

	

}





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////​

package Template;



public class Main2 {



	public static void main(String[] args) {



		

		Person [] pArr = new Person[3];

		

		for(int i = 0; i <=  pArr.length; i++) {

			// Line 10 : Person 배열의 범위를 초과함

	     // java.lang.ArrayIndexOutOfBoundsException 발생

			System.out.println(pArr[i].getName());

			// Line 13 : 존재하지 않는 배열 값 출력

			// java.lang.NullPointerException 발생

		}

	

	}



}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



예외는 총 두 가지 발생한다. 

java.lang.NullPointerException

java.lang.ArrayIndexOutOfBoundsException 



우선 .NullPointerException​ 은 초기 초드상에 단순 Person 에 대한 배열만 선언해 주었을 뿐 그 배열 내부에 각 요소별 Person 객체를 선언해주지 않았다. 떄문에 getName으로 존재하지 않는 객체를 가지고와 NullPointerException​ 예외가 발생한다.



두번째는 ​ArrayIndexOutOfBoundsException ​이다. 이는 초기배열 선언시 3개의 공간을 가지라고 선언한 것을 확인 할 수 있다. 하지만 for문의 코드는 총 배열의 범위가 0 ~ 3 즉 4번 반복하게 되어  Person 배열의​ 공간인 0 ~ 2를 초과하여 위와 같은 예외가 발생한다.​



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

수정 코드

public class Main2 {



	public static void main(String[] args) {



		

		Person [] pArr = new Person[3];

		

		for(int i = 0; i <  pArr.length; i++) {

			pArr[i] = new Person();

			System.out.println(pArr[i].getName());

		}

	

	}



}​

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

for(int i = 0; i <  pArr.length; i++) : 부등호를 <= 가 아닌 < 로 수정함으로써 ArrayIndexOutOfBoundsException예외를 처리



pArr[i] = new Person();​ 반복마다 해당 배열위치의 Person 객체를 생성하여, 기본값 셋팅함으로써 NullPointerException 예외를 처리